(define (main)
        (setPort (open (getElement ScamArgs 1) 'read))
        (define env this)
        (define (iter expr)
            (if (not (eof?)) (begin (eval expr env) (iter (readExpr))))
        )(setNilDisplay 'nil)
        (iter (readExpr))
        
        (env)
)

(define (powerset set)
    (cond 
        ((not (valid? set))
            (print "(nil)")
        )
        ((<= (length set) 1)
            (print  set)
        )
        (else (print "( " set )
                (powerSet (car set))
                (powerSet (cdr set))
                (print " )")
        )
    )
)
(define (powerSet set)
  (if (null? set) '(())
      (let ((rest (powerSet (cdr set))))
        (append rest
                (map (lambda (subset) (cons (car set) subset))
                    rest)))))
